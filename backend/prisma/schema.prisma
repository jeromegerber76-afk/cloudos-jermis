// CloudOS.Jermis Database Schema - SQLite Version
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT & AUTHENTICATION
// ================================

model User {
  id                String    @id @default(cuid())
  azureId           String?   @unique // Azure AD Object ID
  email             String    @unique
  firstName         String
  lastName          String
  displayName       String?
  phoneNumber       String?
  avatar            String?
  role              String    @default("EMPLOYEE") // Was: UserRole enum
  status            String    @default("PENDING")  // Was: UserStatus enum
  department        String?
  position          String?
  manager           User?     @relation("UserManager", fields: [managerId], references: [id])
  managerId         String?
  directReports     User[]    @relation("UserManager")
  
  // Authentication
  password          String?   // For non-Azure users
  lastLogin         DateTime?
  loginCount        Int       @default(0)
  isEmailVerified   Boolean   @default(false)
  emailVerifiedAt   DateTime?
  
  // Settings
  timezone          String    @default("Europe/Zurich")
  language          String    @default("de")
  theme             String    @default("light")
  notificationSettings String @default("{}")  // Was: Json
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  sessions          Session[]
  timesheets        Timesheet[]
  expenses          Expense[]
  files             File[]
  newsArticles      NewsArticle[]
  comments          Comment[]
  notifications     Notification[]
  auditLogs         AuditLog[]
  
  @@map("users")
}

model Session {
  id            String    @id @default(cuid())
  sessionToken  String    @unique
  userId        String
  expires       DateTime
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  
  @@map("sessions")
}

// ================================
// DASHBOARD & NEWS
// ================================

model NewsArticle {
  id          String    @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  status      String    @default("DRAFT")    // Was: NewsStatus enum
  priority    String    @default("NORMAL")   // Was: NewsPriority enum
  publishedAt DateTime?
  expiresAt   DateTime?
  
  // Author
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  // Targeting (stored as comma-separated strings)
  targetRoles String?   // Was: Json - now "ADMIN,SUPPORT"
  targetUsers String?   // Was: Json - now "user1,user2"
  
  // Media
  featuredImage String?
  attachments   String? // Was: Json - now comma-separated file IDs
  
  // Engagement
  views       Int       @default(0)
  likes       Int       @default(0)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  comments    Comment[]
  
  @@map("news_articles")
}

model Comment {
  id            String      @id @default(cuid())
  content       String
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  newsArticleId String?
  newsArticle   NewsArticle? @relation(fields: [newsArticleId], references: [id])
  parentId      String?
  parent        Comment?    @relation("CommentReplies", fields: [parentId], references: [id])
  replies       Comment[]   @relation("CommentReplies")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@map("comments")
}

// ================================
// TIME TRACKING
// ================================

model Project {
  id          String      @id @default(cuid())
  name        String
  description String?
  code        String      @unique
  clientName  String?
  isActive    Boolean     @default(true)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?      // Was: Decimal
  currency    String      @default("CHF")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  timesheets  Timesheet[]
  
  @@map("projects")
}

model Timesheet {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
  
  // Time tracking
  date        DateTime  // Was: @db.Date
  startTime   DateTime?
  endTime     DateTime?
  hours       Float     // Was: Decimal(5,2)
  description String?
  billable    Boolean   @default(true)
  
  // Status
  status      String    @default("DRAFT") // Was: TimesheetStatus enum
  submittedAt DateTime?
  approvedAt  DateTime?
  approvedBy  String?
  rejectedAt  DateTime?
  rejectionReason String?
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([userId, date, projectId])
  @@map("timesheets")
}

// ================================
// EXPENSE MANAGEMENT
// ================================

model Expense {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Expense details
  title           String
  description     String?
  category        String    @default("OTHER") // Was: ExpenseCategory enum
  amount          Float     // Was: Decimal(10,2)
  currency        String    @default("CHF")
  expenseDate     DateTime  // Was: @db.Date
  receiptUrl      String?
  receiptFileName String?
  
  // Approval workflow
  status          String    @default("DRAFT") // Was: ExpenseStatus enum
  submittedAt     DateTime?
  approvedAt      DateTime?
  approvedBy      String?
  rejectedAt      DateTime?
  rejectionReason String?
  paidAt          DateTime?
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("expenses")
}

// ================================
// FILE MANAGEMENT
// ================================

model File {
  id              String    @id @default(cuid())
  filename        String
  originalName    String
  mimetype        String
  size            Int
  type            String    // Was: FileType enum
  url             String
  sharepointUrl   String?   // SharePoint URL if uploaded there
  
  // Metadata
  description     String?
  tags            String?   // Was: Json - now comma-separated tags
  isPublic        Boolean   @default(false)
  
  // Upload info
  uploadedById    String
  uploadedBy      User      @relation(fields: [uploadedById], references: [id])
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("files")
}

// ================================
// INVENTORY MANAGEMENT
// ================================

model InventoryItem {
  id              String          @id @default(cuid())
  sku             String          @unique
  name            String
  description     String?
  category        String?
  
  // Stock info
  currentStock    Int             @default(0)
  minStock        Int             @default(0)
  maxStock        Int?
  status          String          @default("IN_STOCK") // Was: InventoryStatus enum
  
  // Pricing
  costPrice       Float?          // Was: Decimal(10,2)
  salePrice       Float?          // Was: Decimal(10,2)
  currency        String          @default("CHF")
  
  // Product info
  barcode         String?
  location        String?
  supplier        String?
  imageUrl        String?
  
  // Shopify integration
  shopifyProductId String?
  shopifyVariantId String?
  syncWithShopify Boolean         @default(false)
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  stockMovements  StockMovement[]
  
  @@map("inventory_items")
}

model StockMovement {
  id              String        @id @default(cuid())
  itemId          String
  item            InventoryItem @relation(fields: [itemId], references: [id])
  
  type            String        // Was: MovementType enum
  quantity        Int
  reason          String?
  reference       String?       // Order number, etc.
  
  // Before/after stock levels
  stockBefore     Int
  stockAfter      Int
  
  // Timestamps
  createdAt       DateTime      @default(now())
  
  @@map("stock_movements")
}

// ================================
// NOTIFICATIONS
// ================================

model Notification {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  title       String
  message     String
  type        String    @default("INFO") // Was: NotificationType enum
  isRead      Boolean   @default(false)
  actionUrl   String?
  
  createdAt   DateTime  @default(now())
  readAt      DateTime?
  
  @@map("notifications")
}

// ================================
// AUDIT LOG
// ================================

model AuditLog {
  id          String    @id @default(cuid())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  
  action      String    // Was: AuditAction enum
  entity      String    // Table/model name
  entityId    String?   // Record ID
  changes     String?   // Was: Json - now JSON string
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime  @default(now())
  
  @@map("audit_logs")
}